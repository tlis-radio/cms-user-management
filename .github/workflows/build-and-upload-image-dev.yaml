name: 'Build & Upload Dev Image'

on:
  push:
    branches: [ "develop" ]

env:
  AZURE_CONTAINER_REGISTRY: tliscr

jobs:
  build-container-and-push-to-acr:
    name: 'Build container and push to ACR'
    environment: 'development'
    runs-on: ubuntu-latest
    steps:
    # checkout the repo
    - name: 'Checkout Github Action'
      uses: actions/checkout@v3
    # login to Azure Container Registry
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
    # build and push the image
    - run: |
        docker build . --file api.Dockerfile --tag ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/cms-user-management:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/cms-user-management:${{ github.sha }}
        docker build . --file cli.Dockerfile --tag ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/cms-user-management-cli:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/cms-user-management-cli:${{ github.sha }}
  build-helm-chart-and-push-to-acr:
    name: 'Build helm chart and push to ACR'
    environment: 'development'
    runs-on: ubuntu-latest
    steps:
    # checkout the repo
    - name: 'Checkout Github Action'
      uses: actions/checkout@v3
    # install helm
    - name: 'Install helm'
      uses: Azure/setup-helm@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    # login to Azure Container Registry
    - name: 'Login to acr using helm'
      run: |
        echo $ | helm registry login ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
    # package and push the chart
    - name: 'Package chart'
      run: cd chart && helm package . --app-version ${{ github.sha }}
    # push the chart
    - name: 'Push chart to acr'
      run: cd chart && helm push cms-user-management-* oci://${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/helm
  helm-chart-upgrade:
    environment: 'development'
    name: 'Upgrade helm chart'
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [build-container-and-push-to-acr, build-helm-chart-and-push-to-acr]
    steps:
    # install helm
    - name: 'Install helm'
      uses: Azure/setup-helm@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    # login to Azure
    - name: 'Azure login'
      uses: azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    # set up kubelogin for non-interactive login
    - name: 'Set up kubelogin for non-interactive login'
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.25'
    # get the k8s context
    - name: 'Get K8s context'
      uses: azure/aks-set-context@v3
      with:
        resource-group: K8s
        cluster-name: tlis-k8s
        admin: 'false'
        use-kubelogin: 'true'
    # login to Azure Container Registry
    - name: 'Login to acr using helm'
      run: |
        echo $ | helm registry login ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
    # upgrade the chart
    - name: 'Upgrade chart'
      run: |
        helm upgrade cms-user-management oci://${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/helm/cms-user-management \
        --kube-context tlis-k8s \
        --version 1.1.0 \
        --install \
        --create-namespace --namespace cms-staging \
        --set config.connectionStrings.postgres="${{ secrets.POSTGRES_CONNECTION_STRING }}" \
        --set config.jwt.audience="${{ secrets.JWT_AUDIENCE }}" \
        --set config.jwt.authority="${{ secrets.JWT_AUTHORITY }}" \
        --set config.auth0.domain="${{ secrets.AUTH0_DOMAIN }}" \
        --set config.auth0.clientId="${{ secrets.AUTH0_CLIENT_ID }}" \
        --set config.auth0.clientSecret="${{ secrets.AUTH0_CLIENT_SECRET }}" \
        --set config.rabbitmq.hostName="${{ secrets.RABBITMQ_HOSTNAME }}" \
        --set config.rabbitmq.userName="${{ secrets.RABBITMQ_USERNAME }}" \
        --set config.rabbitmq.password="${{ secrets.RABBITMQ_PASSWORD }}" \
        --set config.rabbitmq.virtualHost="${{ vars.RABBITMQ_VIRTUAL_HOST }}"